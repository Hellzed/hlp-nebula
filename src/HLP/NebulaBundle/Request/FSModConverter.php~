<?php
namespace HLP\NebulaBundle\Request;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ConfigurationInterface;
use Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Doctrine\ORM\EntityManager;

class FSModConverter implements ParamConverterInterface
{
  protected $class;
  protected $repository;

  public function __construct($class, EntityManager $em)
  {
    $this->class = $class;
    $this->repository = $em->getRepository($class);
  }

  public function apply(Request $request, ParamConverter $configuration)
  {
    //find with joins À FAIRE !!!
    //+logique de séléction mod>branch>build
    //$options = $this->getOptions($configuration);
    //echo $options['test'];
    $ownerNameCanonical = $request->attributes->get('owner');
    $modId = $request->attributes->get('mod');
    $mod = $this->repository->findSingleMod($ownerNameCanonical, $modId); 
    
    if (null === $mod) {
        throw new NotFoundHttpException("Mod not found.");
    }

    $request->attributes->set($configuration->getName(), $mod);
    return true;
  }

  public function supports(ParamConverter $configuration)
  {
    return $this->class === $configuration->getClass();
  }
  
  protected function getOptions(ParamConverter $configuration)
  {
    return array_replace(array(
    'test' => false,
    ), $configuration->getOptions());
  }
}

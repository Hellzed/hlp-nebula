<?php

/*
* Copyright 2014 HLP-Nebula authors, see NOTICE file

*
* Licensed under the EUPL, Version 1.1 or â€“ as soon they
will be approved by the European Commission - subsequent
versions of the EUPL (the "Licence");
* You may not use this work except in compliance with the
Licence.
* You may obtain a copy of the Licence at:
*
*
http://ec.europa.eu/idabc/eupl

*
* Unless required by applicable law or agreed to in
writing, software distributed under the Licence is
distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied.
* See the Licence for the specific language governing
permissions and limitations under the Licence.
*/ 

namespace HLP\NebulaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BranchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BranchRepository extends EntityRepository
{
    public function findOneWithParent($parameters)
    {
        $queryBuilder = $this->createQueryBuilder('b')
            ->leftJoin('b.meta', 'm')
            ->addSelect('m')
            ->where('m.metaId = :meta')
            ->andWhere('b.branchId = :branchId')
            ->setParameter('meta', $parameters['meta'])
            ->setParameter('branchId', $parameters['branchId'])
        ;
        
        return $queryBuilder->getQuery()
            ->getOneOrNullResult();
    }
    
    public function getBranches($meta, $page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('b')
            ->leftJoin('b.meta', 'm')
            ->where('m = :meta')
            ->setParameter('meta', $meta)
            ->getQuery()
        ;

        $query
            ->setFirstResult(($page-1) * $nbPerPage)
            ->setMaxResults($nbPerPage)
        ;

        return new Paginator($query, true);
    }
    
  public function findSingleBranch($ownerNameCanonical, $modId, $branchId = null)
  {
    $qb = $this->_em->createQueryBuilder();
    $qb->select('b')
       ->from('HLPNebulaBundle:Branch', 'b')
       ->leftJoin('b.mod', 'm')
       ->addSelect('m')
       ->leftJoin('m.userAsOwner', 'uo')
       ->addSelect('uo')
       ->leftJoin('m.teamAsOwner', 'to')
       ->addSelect('to')
       ->leftJoin('b.builds', 'u')
       ->addSelect('u')
       ->where('uo.usernameCanonical = :nameCanonical OR to.nameCanonical = :nameCanonical')
       ->andWhere('m.modId = :modId')
       ->orderBy('u.versionMajor', 'DESC')
       ->addOrderBy('u.versionMinor', 'DESC')
       ->addOrderBy('u.versionPatch', 'DESC')
       ->addOrderBy('u.versionPreRelease', 'DESC')
       ->setParameter('nameCanonical', $ownerNameCanonical)
       ->setParameter('modId', $modId);
    
    if(isset($branchId))
    {
      $qb->andWhere('b.branchId = :branchId')
         ->setParameter('branchId', $branchId);
    }
    else
    {
      $qb->andWhere('b.isDefault = true');
    }
    
    
    return $qb->getQuery()
              ->getOneOrNullResult();
  }
  
  public function findWithJoins($args)
  {
    $qb = $this->_em->createQueryBuilder();
    $qb->select('b')
       ->from('HLPNebulaBundle:Branch', 'b')
       ->leftJoin('b.meta', 'm')
       ->addSelect('m')
       ->where('b.branchId = :branchId AND b.metaId = :metaId')
       ->setParameter('branchId', $args['branchId'])
       ->setParameter('metaId', $args['metaId']);
    
    return $qb->getQuery()
              ->getOneOrNullResult();
  }
  
  public function getBranchFromMod($id, $exclude = null)
  {
    $qb = $this->_em->createQueryBuilder();
    $qb->select('b')
       ->from('HLPNebulaBundle:Branch', 'b')
       ->leftJoin('b.meta', 'm')
       ->where('m.id = :id')
       ->orderBy('b.isDefault', 'DESC')
       ->setParameter('id', $id);
       
    if($exclude)
    {
      $qb->andWhere('b.id != :exclude')
         ->setParameter('exclude', $exclude);
    }
       
    return $qb;
  }
}

$(document).ready(function() {
  //TARGET FORM GOES HERE
  var $form = $('form');
  
  var $index = new Array();
  
  //We run this function to initialise the form
  findPrototypes($form);
  
  function findPrototypes($element) {
    //First, this function finds <div> elements in the target element.
    $element.children('div').each(function(index) {
      //Then, it searches for their 'data-prototype' attribute generated by Symfony.
      var $prototype = $(this).attr('data-prototype');
      //If the attibute exists and contains a prototype :
      if (typeof $prototype !== typeof undefined && $prototype !== false) {
        //It stores the parent element and Symfony field Id
        var $container = $(this).parent();
        var $fieldId = $(this).attr('id');
        //And it creates an index for elements sharing the same field Id inside the container (I should write a better enumerator) :
        $index[$fieldId] = $container.children('div').has('textarea,input').length;
        //If it's empty, we add a new field
        if ($index[$fieldId] == 0) {
          addField($container, $prototype, $fieldId);
          
        } else { //Else we keep existing fields and add remove buttons :
          
          //Still need a better way to differentiate field divs from utility divs
          $container.children('div').has('textarea,input').each(function() {
            addRemoveButton($prototype, $fieldId);
          });
        }
        //NEW FIELD BUTTON HTML GOES HERE
        //Provisoire : stripped IDs
        var $strippedId = $fieldId.split("_").pop(-1);
        var $addButton = $('<div class=""><button type="button" id="add_' + $fieldId + '" class="btn btn-primary">Add ' + $strippedId + '</button></div>');
        //The new field button is added to the container...
        $container.find(':last').after($addButton);
        //... and a listenr is added.
        $addButton.click(function(e) {
          addField($container, $prototype, $fieldId);
          return false;
        });
      }
      //This function is run recursively, to make sure inner prototypes are detected too, for existing fields.
      //Maybe it could be placed at the existing field detection stage.
      findPrototypes($(this));
    });
  }
  
  function addField($container, $prototype, $fieldId) {
    //Get the stripped field ID
    var $strippedId = $fieldId.split("_").pop(-1);
    //Define Regexps : one for the __$object_prototype__ , one for the  __$object_prototype__label__
    var $labelRegex = new RegExp('__' + $strippedId + '_prototype__label__','g');
    var $prototypeRegex = new RegExp('__' + $strippedId + '_prototype__','g');
    //Replace the __prototype__ strings in the $prototype
    $prototype = $prototype.replace($labelRegex, $index[$fieldId]).replace($prototypeRegex, $index[$fieldId]);
    //Make the prototype an HTML element
    $prototype = $($prototype);
    //Appen it to the prototype storage div's parent
    addRemoveButton($prototype, $fieldId);
    $container.find(':last').before($prototype);
    //increment the fields index
    $index[$fieldId]++;
    //Whenever we dynamically add a field, we run findPrototypes() on it :
    findPrototypes($prototype);
  }
  
  //Function : add a remove button to a field
  function addRemoveButton($prototype, $fieldId) {
    //REMOVE BUTTON HTML GOES HERE
    //Provisoire : stripped IDs
    var $strippedId = $fieldId.split("_").pop(-1);
    $removeLink = $('<button type="button" id="remove_' + $fieldId + '_' + $index[$fieldId] + '" class="btn btn-danger">Remove ' + $strippedId + '</button>');
    $prototype.append($removeLink);
    //Add the event listener to the button
    $removeLink.click(function(e) {
      $prototype.remove();
      return false;
    });
  }
});
